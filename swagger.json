{
  "openapi": "3.0.1",
  "info": {
    "version": "1",
    "title": "Your pet API",
    "description": "This is API for selling pets, adding them to favorites, describing your pet, etc.",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [{ "url": "https://your-pet-shw3.onrender.com" }],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    }
  ],
  "paths": {
    "/users/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          },
          "409": {
            "description": "Provided email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorConflictEmailResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "requestBody": {
          "description": "Login's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/update": {
      "patch": {
        "tags": ["Auth"],
        "summary": "Update user information",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Update user's object (multipart/form-data)",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation, user update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "security": [{ "Bearer": [] }],
        "responses": {
          "204": {
            "description": "Successful operation, No content"
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Name"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "Qwerty123"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "User's name",
              "example": "Name"
            },
            "email": {
              "type": "string",
              "description": "User's email",
              "format": "email"
            },
            "token": {
              "type": "string",
              "description": "User's token",
              "example": "32143232436545474"
            }
          }
        },
        "example": { "name": "Taras", "email": "Taras@gmail.com" }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "Qwerty123"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "Taras"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email",
                "example": "Taras@gmail.com"
              },
              "avatarURL": {
                "type": "string",
                "description": "User's avatar link",
                "example": "//www.gravatar.com/avatar/1aedb8d9dc4751e229a335e371db8058"
              }
            }
          },
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "32143232436545474"
          }
        },
        "example": {
          "user": {
            "name": "Taras",
            "email": "Taras@gmail.com",
            "avatarURL": "//www.gravatar.com/avatar/1aedb8ddc4751e229a335e371db805"
          },
          "token": "32143232436545474"
        }
      },
      "UserUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Taras"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "avatar": {
            "type": "file",
            "format": "binary",
            "description": "User's avatar file",
            "example": "avatar.jpg"
          },
          "birthday": {
            "type": "string",
            "description": "User's birthday",
            "example": "23-12-2023"
          },
          "phone": {
            "type": "string",
            "description": "User's phone number",
            "example": "+38097485495"
          },
          "city": {
            "type": "string",
            "description": "User's city",
            "example": "Lviv"
          }
        }
      },
      "UserUpdateResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Taras"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "avatarURL": {
            "type": "string",
            "description": "User's avatar link",
            "example": "//www.gravatar.com/avatar/1aedb8ddc4751e229a335e371db805"
          },
          "birthday": {
            "type": "string",
            "description": "User's birthday",
            "example": "23-12-2023"
          },
          "phone": {
            "type": "string",
            "description": "User's phone number",
            "example": "+38097485495"
          },
          "city": {
            "type": "string",
            "description": "User's city",
            "example": "Lviv"
          }
        },
        "example": {
          "name": "Taras",
          "email": "user@example.com",
          "avatarURL": "//www.gravatar.com/avatar/1aedb8d9dc4751e229a335e371db8058",
          "birthday": "23-12-2023",
          "phone": "+38097485495",
          "city": "Lviv"
        }
      },

      "errorBadRequestResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "This text will describe what is wrong with the request body"
          }
        }
      },
      "errorConflictEmailResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Email has already in use"
          }
        }
      },
      "errorUnauthorizedResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Unauthorized"
          }
        }
      },
      "errorServerResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "This text will describe what is wrong with the internal server"
          }
        }
      },
      "errorNotFoundResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Not Found"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
